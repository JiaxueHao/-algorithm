package interest;
/*
	平衡二叉树

1）每个结点要么是红的，要么是黑的。
2）根结点是黑的。
3）每个叶结点，即空结点（NIL）是黑的。
4）如果一个结点是红的，那么它的俩个儿子都是黑的。
5）对每个结点，从该结点到其子孙结点的所有路径上包含相同数目的黑结点。

左旋转
对于当前结点而言，如果右子结点为红色，左子结点为黑色，则执行左旋转
右旋转
对于当前结点而言，如果左子、左孙子结点均为红色，则执行右旋转
变色
对于当前结点而言，如果左、右子结点均为红色，则执行变色

	插入操作
新插入的结点一律为红色 
情况1：插入的是根结点。
原树是空树，此情况只会违反性质2。
  对策：直接把此结点涂为黑色。
情况2：插入的结点的父结点是黑色。
此不会违反性质2和性质4，红黑树没有被破坏。
  对策：什么也不做。
情况3：当前结点的父结点是红色且祖父结点的另一个子结点（叔叔结点）是红色。				——>变色
情况4：当前结点的父结点是红色且是祖父结点的左节点，祖父结点的另一个子结点（叔叔结点）是黑色。	——>LL右旋
情况5：当前结点的父结点是红色且是祖父结点的右节点，祖父结点的另一个子结点（叔叔结点）是黑色。	——>LR
*/

public class RedBlackTree {

}
